// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rgraphql.proto

package rgraphql

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RGQLPrimitive_Kind int32

const (
	RGQLPrimitive_PRIMITIVE_KIND_NULL   RGQLPrimitive_Kind = 0
	RGQLPrimitive_PRIMITIVE_KIND_INT    RGQLPrimitive_Kind = 1
	RGQLPrimitive_PRIMITIVE_KIND_FLOAT  RGQLPrimitive_Kind = 2
	RGQLPrimitive_PRIMITIVE_KIND_STRING RGQLPrimitive_Kind = 3
	RGQLPrimitive_PRIMITIVE_KIND_BOOL   RGQLPrimitive_Kind = 4
	RGQLPrimitive_PRIMITIVE_KIND_OBJECT RGQLPrimitive_Kind = 5
	// A marker for an empty array.
	RGQLPrimitive_PRIMITIVE_KIND_ARRAY RGQLPrimitive_Kind = 6
)

var RGQLPrimitive_Kind_name = map[int32]string{
	0: "PRIMITIVE_KIND_NULL",
	1: "PRIMITIVE_KIND_INT",
	2: "PRIMITIVE_KIND_FLOAT",
	3: "PRIMITIVE_KIND_STRING",
	4: "PRIMITIVE_KIND_BOOL",
	5: "PRIMITIVE_KIND_OBJECT",
	6: "PRIMITIVE_KIND_ARRAY",
}
var RGQLPrimitive_Kind_value = map[string]int32{
	"PRIMITIVE_KIND_NULL":   0,
	"PRIMITIVE_KIND_INT":    1,
	"PRIMITIVE_KIND_FLOAT":  2,
	"PRIMITIVE_KIND_STRING": 3,
	"PRIMITIVE_KIND_BOOL":   4,
	"PRIMITIVE_KIND_OBJECT": 5,
	"PRIMITIVE_KIND_ARRAY":  6,
}

func (x RGQLPrimitive_Kind) String() string {
	return proto.EnumName(RGQLPrimitive_Kind_name, int32(x))
}
func (RGQLPrimitive_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{4, 0}
}

type RGQLQueryTreeMutation_SubtreeOperation int32

const (
	// Add a child tree to the subtree.
	RGQLQueryTreeMutation_SUBTREE_ADD_CHILD RGQLQueryTreeMutation_SubtreeOperation = 0
	// Delete a tree node and all children.
	RGQLQueryTreeMutation_SUBTREE_DELETE RGQLQueryTreeMutation_SubtreeOperation = 1
)

var RGQLQueryTreeMutation_SubtreeOperation_name = map[int32]string{
	0: "SUBTREE_ADD_CHILD",
	1: "SUBTREE_DELETE",
}
var RGQLQueryTreeMutation_SubtreeOperation_value = map[string]int32{
	"SUBTREE_ADD_CHILD": 0,
	"SUBTREE_DELETE":    1,
}

func (x RGQLQueryTreeMutation_SubtreeOperation) String() string {
	return proto.EnumName(RGQLQueryTreeMutation_SubtreeOperation_name, int32(x))
}
func (RGQLQueryTreeMutation_SubtreeOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{7, 0}
}

type RGQLValueInit_CacheStrategy int32

const (
	RGQLValueInit_CACHE_LRU RGQLValueInit_CacheStrategy = 0
)

var RGQLValueInit_CacheStrategy_name = map[int32]string{
	0: "CACHE_LRU",
}
var RGQLValueInit_CacheStrategy_value = map[string]int32{
	"CACHE_LRU": 0,
}

func (x RGQLValueInit_CacheStrategy) String() string {
	return proto.EnumName(RGQLValueInit_CacheStrategy_name, int32(x))
}
func (RGQLValueInit_CacheStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{10, 0}
}

type RGQLQueryFieldDirective struct {
	// Directive name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional arguments.
	Args                 []*FieldArgument `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RGQLQueryFieldDirective) Reset()         { *m = RGQLQueryFieldDirective{} }
func (m *RGQLQueryFieldDirective) String() string { return proto.CompactTextString(m) }
func (*RGQLQueryFieldDirective) ProtoMessage()    {}
func (*RGQLQueryFieldDirective) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{0}
}
func (m *RGQLQueryFieldDirective) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLQueryFieldDirective.Unmarshal(m, b)
}
func (m *RGQLQueryFieldDirective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLQueryFieldDirective.Marshal(b, m, deterministic)
}
func (dst *RGQLQueryFieldDirective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLQueryFieldDirective.Merge(dst, src)
}
func (m *RGQLQueryFieldDirective) XXX_Size() int {
	return xxx_messageInfo_RGQLQueryFieldDirective.Size(m)
}
func (m *RGQLQueryFieldDirective) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLQueryFieldDirective.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLQueryFieldDirective proto.InternalMessageInfo

func (m *RGQLQueryFieldDirective) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RGQLQueryFieldDirective) GetArgs() []*FieldArgument {
	if m != nil {
		return m.Args
	}
	return nil
}

type RGQLQueryTreeNode struct {
	// Integer ID of the node.
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the field this node represents.
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	// Arguments.
	Args []*FieldArgument `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	// Directives
	Directive []*RGQLQueryFieldDirective `protobuf:"bytes,4,rep,name=directive" json:"directive,omitempty"`
	// Children
	Children             []*RGQLQueryTreeNode `protobuf:"bytes,5,rep,name=children" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RGQLQueryTreeNode) Reset()         { *m = RGQLQueryTreeNode{} }
func (m *RGQLQueryTreeNode) String() string { return proto.CompactTextString(m) }
func (*RGQLQueryTreeNode) ProtoMessage()    {}
func (*RGQLQueryTreeNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{1}
}
func (m *RGQLQueryTreeNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLQueryTreeNode.Unmarshal(m, b)
}
func (m *RGQLQueryTreeNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLQueryTreeNode.Marshal(b, m, deterministic)
}
func (dst *RGQLQueryTreeNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLQueryTreeNode.Merge(dst, src)
}
func (m *RGQLQueryTreeNode) XXX_Size() int {
	return xxx_messageInfo_RGQLQueryTreeNode.Size(m)
}
func (m *RGQLQueryTreeNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLQueryTreeNode.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLQueryTreeNode proto.InternalMessageInfo

func (m *RGQLQueryTreeNode) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RGQLQueryTreeNode) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *RGQLQueryTreeNode) GetArgs() []*FieldArgument {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RGQLQueryTreeNode) GetDirective() []*RGQLQueryFieldDirective {
	if m != nil {
		return m.Directive
	}
	return nil
}

func (m *RGQLQueryTreeNode) GetChildren() []*RGQLQueryTreeNode {
	if m != nil {
		return m.Children
	}
	return nil
}

type FieldArgument struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	VariableId           uint32   `protobuf:"varint,2,opt,name=variable_id,json=variableId" json:"variable_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldArgument) Reset()         { *m = FieldArgument{} }
func (m *FieldArgument) String() string { return proto.CompactTextString(m) }
func (*FieldArgument) ProtoMessage()    {}
func (*FieldArgument) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{2}
}
func (m *FieldArgument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldArgument.Unmarshal(m, b)
}
func (m *FieldArgument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldArgument.Marshal(b, m, deterministic)
}
func (dst *FieldArgument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldArgument.Merge(dst, src)
}
func (m *FieldArgument) XXX_Size() int {
	return xxx_messageInfo_FieldArgument.Size(m)
}
func (m *FieldArgument) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldArgument.DiscardUnknown(m)
}

var xxx_messageInfo_FieldArgument proto.InternalMessageInfo

func (m *FieldArgument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldArgument) GetVariableId() uint32 {
	if m != nil {
		return m.VariableId
	}
	return 0
}

type ASTVariable struct {
	Id                   uint32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value                *RGQLPrimitive `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ASTVariable) Reset()         { *m = ASTVariable{} }
func (m *ASTVariable) String() string { return proto.CompactTextString(m) }
func (*ASTVariable) ProtoMessage()    {}
func (*ASTVariable) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{3}
}
func (m *ASTVariable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ASTVariable.Unmarshal(m, b)
}
func (m *ASTVariable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ASTVariable.Marshal(b, m, deterministic)
}
func (dst *ASTVariable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ASTVariable.Merge(dst, src)
}
func (m *ASTVariable) XXX_Size() int {
	return xxx_messageInfo_ASTVariable.Size(m)
}
func (m *ASTVariable) XXX_DiscardUnknown() {
	xxx_messageInfo_ASTVariable.DiscardUnknown(m)
}

var xxx_messageInfo_ASTVariable proto.InternalMessageInfo

func (m *ASTVariable) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ASTVariable) GetValue() *RGQLPrimitive {
	if m != nil {
		return m.Value
	}
	return nil
}

type RGQLPrimitive struct {
	Kind                 RGQLPrimitive_Kind `protobuf:"varint,1,opt,name=kind,enum=rgraphql.RGQLPrimitive_Kind" json:"kind,omitempty"`
	IntValue             int32              `protobuf:"varint,2,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	FloatValue           float64            `protobuf:"fixed64,3,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	StringValue          string             `protobuf:"bytes,4,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BoolValue            bool               `protobuf:"varint,5,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RGQLPrimitive) Reset()         { *m = RGQLPrimitive{} }
func (m *RGQLPrimitive) String() string { return proto.CompactTextString(m) }
func (*RGQLPrimitive) ProtoMessage()    {}
func (*RGQLPrimitive) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{4}
}
func (m *RGQLPrimitive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLPrimitive.Unmarshal(m, b)
}
func (m *RGQLPrimitive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLPrimitive.Marshal(b, m, deterministic)
}
func (dst *RGQLPrimitive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLPrimitive.Merge(dst, src)
}
func (m *RGQLPrimitive) XXX_Size() int {
	return xxx_messageInfo_RGQLPrimitive.Size(m)
}
func (m *RGQLPrimitive) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLPrimitive.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLPrimitive proto.InternalMessageInfo

func (m *RGQLPrimitive) GetKind() RGQLPrimitive_Kind {
	if m != nil {
		return m.Kind
	}
	return RGQLPrimitive_PRIMITIVE_KIND_NULL
}

func (m *RGQLPrimitive) GetIntValue() int32 {
	if m != nil {
		return m.IntValue
	}
	return 0
}

func (m *RGQLPrimitive) GetFloatValue() float64 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *RGQLPrimitive) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *RGQLPrimitive) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

// Messages
type RGQLClientMessage struct {
	InitQuery            *RGQLQueryInit         `protobuf:"bytes,1,opt,name=init_query,json=initQuery" json:"init_query,omitempty"`
	MutateTree           *RGQLQueryTreeMutation `protobuf:"bytes,2,opt,name=mutate_tree,json=mutateTree" json:"mutate_tree,omitempty"`
	FinishQuery          *RGQLQueryFinish       `protobuf:"bytes,3,opt,name=finish_query,json=finishQuery" json:"finish_query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RGQLClientMessage) Reset()         { *m = RGQLClientMessage{} }
func (m *RGQLClientMessage) String() string { return proto.CompactTextString(m) }
func (*RGQLClientMessage) ProtoMessage()    {}
func (*RGQLClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{5}
}
func (m *RGQLClientMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLClientMessage.Unmarshal(m, b)
}
func (m *RGQLClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLClientMessage.Marshal(b, m, deterministic)
}
func (dst *RGQLClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLClientMessage.Merge(dst, src)
}
func (m *RGQLClientMessage) XXX_Size() int {
	return xxx_messageInfo_RGQLClientMessage.Size(m)
}
func (m *RGQLClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLClientMessage proto.InternalMessageInfo

func (m *RGQLClientMessage) GetInitQuery() *RGQLQueryInit {
	if m != nil {
		return m.InitQuery
	}
	return nil
}

func (m *RGQLClientMessage) GetMutateTree() *RGQLQueryTreeMutation {
	if m != nil {
		return m.MutateTree
	}
	return nil
}

func (m *RGQLClientMessage) GetFinishQuery() *RGQLQueryFinish {
	if m != nil {
		return m.FinishQuery
	}
	return nil
}

type RGQLQueryInit struct {
	// The ID of this query.
	QueryId uint32 `protobuf:"varint,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	// Force serial for this query?
	// Note: serial queries execute as soon as the first mutation arrives, and cannot be updated.
	ForceSerial bool `protobuf:"varint,2,opt,name=force_serial,json=forceSerial" json:"force_serial,omitempty"`
	// Operation type, i.e. query, mutation, etc.
	OperationType        string   `protobuf:"bytes,3,opt,name=operation_type,json=operationType" json:"operation_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RGQLQueryInit) Reset()         { *m = RGQLQueryInit{} }
func (m *RGQLQueryInit) String() string { return proto.CompactTextString(m) }
func (*RGQLQueryInit) ProtoMessage()    {}
func (*RGQLQueryInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{6}
}
func (m *RGQLQueryInit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLQueryInit.Unmarshal(m, b)
}
func (m *RGQLQueryInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLQueryInit.Marshal(b, m, deterministic)
}
func (dst *RGQLQueryInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLQueryInit.Merge(dst, src)
}
func (m *RGQLQueryInit) XXX_Size() int {
	return xxx_messageInfo_RGQLQueryInit.Size(m)
}
func (m *RGQLQueryInit) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLQueryInit.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLQueryInit proto.InternalMessageInfo

func (m *RGQLQueryInit) GetQueryId() uint32 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *RGQLQueryInit) GetForceSerial() bool {
	if m != nil {
		return m.ForceSerial
	}
	return false
}

func (m *RGQLQueryInit) GetOperationType() string {
	if m != nil {
		return m.OperationType
	}
	return ""
}

type RGQLQueryTreeMutation struct {
	// The ID of this query.
	QueryId uint32 `protobuf:"varint,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	// All node mutations in this step.
	NodeMutation []*RGQLQueryTreeMutation_NodeMutation `protobuf:"bytes,2,rep,name=node_mutation,json=nodeMutation" json:"node_mutation,omitempty"`
	// Any new variables.
	Variables            []*ASTVariable `protobuf:"bytes,3,rep,name=variables" json:"variables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RGQLQueryTreeMutation) Reset()         { *m = RGQLQueryTreeMutation{} }
func (m *RGQLQueryTreeMutation) String() string { return proto.CompactTextString(m) }
func (*RGQLQueryTreeMutation) ProtoMessage()    {}
func (*RGQLQueryTreeMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{7}
}
func (m *RGQLQueryTreeMutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLQueryTreeMutation.Unmarshal(m, b)
}
func (m *RGQLQueryTreeMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLQueryTreeMutation.Marshal(b, m, deterministic)
}
func (dst *RGQLQueryTreeMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLQueryTreeMutation.Merge(dst, src)
}
func (m *RGQLQueryTreeMutation) XXX_Size() int {
	return xxx_messageInfo_RGQLQueryTreeMutation.Size(m)
}
func (m *RGQLQueryTreeMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLQueryTreeMutation.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLQueryTreeMutation proto.InternalMessageInfo

func (m *RGQLQueryTreeMutation) GetQueryId() uint32 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *RGQLQueryTreeMutation) GetNodeMutation() []*RGQLQueryTreeMutation_NodeMutation {
	if m != nil {
		return m.NodeMutation
	}
	return nil
}

func (m *RGQLQueryTreeMutation) GetVariables() []*ASTVariable {
	if m != nil {
		return m.Variables
	}
	return nil
}

type RGQLQueryTreeMutation_NodeMutation struct {
	// ID of the node we are operating on.
	NodeId uint32 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// Operation we are taking.
	Operation RGQLQueryTreeMutation_SubtreeOperation `protobuf:"varint,2,opt,name=operation,enum=rgraphql.RGQLQueryTreeMutation_SubtreeOperation" json:"operation,omitempty"`
	// The new node tree to add, if we are adding a child.
	Node                 *RGQLQueryTreeNode `protobuf:"bytes,3,opt,name=node" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RGQLQueryTreeMutation_NodeMutation) Reset()         { *m = RGQLQueryTreeMutation_NodeMutation{} }
func (m *RGQLQueryTreeMutation_NodeMutation) String() string { return proto.CompactTextString(m) }
func (*RGQLQueryTreeMutation_NodeMutation) ProtoMessage()    {}
func (*RGQLQueryTreeMutation_NodeMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{7, 0}
}
func (m *RGQLQueryTreeMutation_NodeMutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLQueryTreeMutation_NodeMutation.Unmarshal(m, b)
}
func (m *RGQLQueryTreeMutation_NodeMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLQueryTreeMutation_NodeMutation.Marshal(b, m, deterministic)
}
func (dst *RGQLQueryTreeMutation_NodeMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLQueryTreeMutation_NodeMutation.Merge(dst, src)
}
func (m *RGQLQueryTreeMutation_NodeMutation) XXX_Size() int {
	return xxx_messageInfo_RGQLQueryTreeMutation_NodeMutation.Size(m)
}
func (m *RGQLQueryTreeMutation_NodeMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLQueryTreeMutation_NodeMutation.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLQueryTreeMutation_NodeMutation proto.InternalMessageInfo

func (m *RGQLQueryTreeMutation_NodeMutation) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *RGQLQueryTreeMutation_NodeMutation) GetOperation() RGQLQueryTreeMutation_SubtreeOperation {
	if m != nil {
		return m.Operation
	}
	return RGQLQueryTreeMutation_SUBTREE_ADD_CHILD
}

func (m *RGQLQueryTreeMutation_NodeMutation) GetNode() *RGQLQueryTreeNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type RGQLQueryFinish struct {
	// The ID of this query.
	QueryId              uint32   `protobuf:"varint,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RGQLQueryFinish) Reset()         { *m = RGQLQueryFinish{} }
func (m *RGQLQueryFinish) String() string { return proto.CompactTextString(m) }
func (*RGQLQueryFinish) ProtoMessage()    {}
func (*RGQLQueryFinish) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{8}
}
func (m *RGQLQueryFinish) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLQueryFinish.Unmarshal(m, b)
}
func (m *RGQLQueryFinish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLQueryFinish.Marshal(b, m, deterministic)
}
func (dst *RGQLQueryFinish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLQueryFinish.Merge(dst, src)
}
func (m *RGQLQueryFinish) XXX_Size() int {
	return xxx_messageInfo_RGQLQueryFinish.Size(m)
}
func (m *RGQLQueryFinish) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLQueryFinish.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLQueryFinish proto.InternalMessageInfo

func (m *RGQLQueryFinish) GetQueryId() uint32 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

type RGQLServerMessage struct {
	QueryError           *RGQLQueryError    `protobuf:"bytes,2,opt,name=query_error,json=queryError" json:"query_error,omitempty"`
	ValueInit            *RGQLValueInit     `protobuf:"bytes,4,opt,name=value_init,json=valueInit" json:"value_init,omitempty"`
	ValueBatch           *RGQLValueBatch    `protobuf:"bytes,5,opt,name=value_batch,json=valueBatch" json:"value_batch,omitempty"`
	ValueFinalize        *RGQLValueFinalize `protobuf:"bytes,6,opt,name=value_finalize,json=valueFinalize" json:"value_finalize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RGQLServerMessage) Reset()         { *m = RGQLServerMessage{} }
func (m *RGQLServerMessage) String() string { return proto.CompactTextString(m) }
func (*RGQLServerMessage) ProtoMessage()    {}
func (*RGQLServerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{9}
}
func (m *RGQLServerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLServerMessage.Unmarshal(m, b)
}
func (m *RGQLServerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLServerMessage.Marshal(b, m, deterministic)
}
func (dst *RGQLServerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLServerMessage.Merge(dst, src)
}
func (m *RGQLServerMessage) XXX_Size() int {
	return xxx_messageInfo_RGQLServerMessage.Size(m)
}
func (m *RGQLServerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLServerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLServerMessage proto.InternalMessageInfo

func (m *RGQLServerMessage) GetQueryError() *RGQLQueryError {
	if m != nil {
		return m.QueryError
	}
	return nil
}

func (m *RGQLServerMessage) GetValueInit() *RGQLValueInit {
	if m != nil {
		return m.ValueInit
	}
	return nil
}

func (m *RGQLServerMessage) GetValueBatch() *RGQLValueBatch {
	if m != nil {
		return m.ValueBatch
	}
	return nil
}

func (m *RGQLServerMessage) GetValueFinalize() *RGQLValueFinalize {
	if m != nil {
		return m.ValueFinalize
	}
	return nil
}

// RGQLValueInit initializes a result value tree.
type RGQLValueInit struct {
	// result_id is the identifier for the result tree.
	ResultId uint32 `protobuf:"varint,1,opt,name=result_id,json=resultId" json:"result_id,omitempty"`
	// query_id is the identifier for the corresponding query.
	QueryId uint32 `protobuf:"varint,2,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	// cache_strategy is the strategy used for the path cache.
	CacheStrategy RGQLValueInit_CacheStrategy `protobuf:"varint,3,opt,name=cache_strategy,json=cacheStrategy,enum=rgraphql.RGQLValueInit_CacheStrategy" json:"cache_strategy,omitempty"`
	// cache_size is the size of the path cache, if necessary.
	CacheSize            uint32   `protobuf:"varint,4,opt,name=cache_size,json=cacheSize" json:"cache_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RGQLValueInit) Reset()         { *m = RGQLValueInit{} }
func (m *RGQLValueInit) String() string { return proto.CompactTextString(m) }
func (*RGQLValueInit) ProtoMessage()    {}
func (*RGQLValueInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{10}
}
func (m *RGQLValueInit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLValueInit.Unmarshal(m, b)
}
func (m *RGQLValueInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLValueInit.Marshal(b, m, deterministic)
}
func (dst *RGQLValueInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLValueInit.Merge(dst, src)
}
func (m *RGQLValueInit) XXX_Size() int {
	return xxx_messageInfo_RGQLValueInit.Size(m)
}
func (m *RGQLValueInit) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLValueInit.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLValueInit proto.InternalMessageInfo

func (m *RGQLValueInit) GetResultId() uint32 {
	if m != nil {
		return m.ResultId
	}
	return 0
}

func (m *RGQLValueInit) GetQueryId() uint32 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *RGQLValueInit) GetCacheStrategy() RGQLValueInit_CacheStrategy {
	if m != nil {
		return m.CacheStrategy
	}
	return RGQLValueInit_CACHE_LRU
}

func (m *RGQLValueInit) GetCacheSize() uint32 {
	if m != nil {
		return m.CacheSize
	}
	return 0
}

// RGQLValueFinalize finalizes a result tree.
type RGQLValueFinalize struct {
	ResultId             uint32   `protobuf:"varint,1,opt,name=result_id,json=resultId" json:"result_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RGQLValueFinalize) Reset()         { *m = RGQLValueFinalize{} }
func (m *RGQLValueFinalize) String() string { return proto.CompactTextString(m) }
func (*RGQLValueFinalize) ProtoMessage()    {}
func (*RGQLValueFinalize) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{11}
}
func (m *RGQLValueFinalize) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLValueFinalize.Unmarshal(m, b)
}
func (m *RGQLValueFinalize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLValueFinalize.Marshal(b, m, deterministic)
}
func (dst *RGQLValueFinalize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLValueFinalize.Merge(dst, src)
}
func (m *RGQLValueFinalize) XXX_Size() int {
	return xxx_messageInfo_RGQLValueFinalize.Size(m)
}
func (m *RGQLValueFinalize) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLValueFinalize.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLValueFinalize proto.InternalMessageInfo

func (m *RGQLValueFinalize) GetResultId() uint32 {
	if m != nil {
		return m.ResultId
	}
	return 0
}

// Communicating a failure in the input query.
type RGQLQueryError struct {
	QueryId              uint32   `protobuf:"varint,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	QueryNodeId          uint32   `protobuf:"varint,2,opt,name=query_node_id,json=queryNodeId" json:"query_node_id,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RGQLQueryError) Reset()         { *m = RGQLQueryError{} }
func (m *RGQLQueryError) String() string { return proto.CompactTextString(m) }
func (*RGQLQueryError) ProtoMessage()    {}
func (*RGQLQueryError) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{12}
}
func (m *RGQLQueryError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLQueryError.Unmarshal(m, b)
}
func (m *RGQLQueryError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLQueryError.Marshal(b, m, deterministic)
}
func (dst *RGQLQueryError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLQueryError.Merge(dst, src)
}
func (m *RGQLQueryError) XXX_Size() int {
	return xxx_messageInfo_RGQLQueryError.Size(m)
}
func (m *RGQLQueryError) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLQueryError.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLQueryError proto.InternalMessageInfo

func (m *RGQLQueryError) GetQueryId() uint32 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *RGQLQueryError) GetQueryNodeId() uint32 {
	if m != nil {
		return m.QueryNodeId
	}
	return 0
}

func (m *RGQLQueryError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RGQLValue struct {
	// The ID of the field in the query tree, if a field.
	QueryNodeId uint32 `protobuf:"varint,1,opt,name=query_node_id,json=queryNodeId" json:"query_node_id,omitempty"`
	// The 1-based index, if an array element.
	ArrayIndex uint32 `protobuf:"varint,2,opt,name=array_index,json=arrayIndex" json:"array_index,omitempty"`
	// If this is a 0-th index value, this is a pointer to a previous identifier.
	// Otherwise, this is an identifier for adding an alias to this path.
	PosIdentifier uint32 `protobuf:"varint,3,opt,name=pos_identifier,json=posIdentifier" json:"pos_identifier,omitempty"`
	// The value, if we have one.
	Value *RGQLPrimitive `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	// The error, if we are erroring this field.
	Error                string   `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RGQLValue) Reset()         { *m = RGQLValue{} }
func (m *RGQLValue) String() string { return proto.CompactTextString(m) }
func (*RGQLValue) ProtoMessage()    {}
func (*RGQLValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{13}
}
func (m *RGQLValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLValue.Unmarshal(m, b)
}
func (m *RGQLValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLValue.Marshal(b, m, deterministic)
}
func (dst *RGQLValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLValue.Merge(dst, src)
}
func (m *RGQLValue) XXX_Size() int {
	return xxx_messageInfo_RGQLValue.Size(m)
}
func (m *RGQLValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLValue.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLValue proto.InternalMessageInfo

func (m *RGQLValue) GetQueryNodeId() uint32 {
	if m != nil {
		return m.QueryNodeId
	}
	return 0
}

func (m *RGQLValue) GetArrayIndex() uint32 {
	if m != nil {
		return m.ArrayIndex
	}
	return 0
}

func (m *RGQLValue) GetPosIdentifier() uint32 {
	if m != nil {
		return m.PosIdentifier
	}
	return 0
}

func (m *RGQLValue) GetValue() *RGQLPrimitive {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RGQLValue) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RGQLValueBatch struct {
	// The ID of the result tree this batch is for.
	ResultId uint32 `protobuf:"varint,1,opt,name=result_id,json=resultId" json:"result_id,omitempty"`
	// The batch of RGQLValue values, encoded.
	Values               [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RGQLValueBatch) Reset()         { *m = RGQLValueBatch{} }
func (m *RGQLValueBatch) String() string { return proto.CompactTextString(m) }
func (*RGQLValueBatch) ProtoMessage()    {}
func (*RGQLValueBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_rgraphql_326bcf8c9762af64, []int{14}
}
func (m *RGQLValueBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RGQLValueBatch.Unmarshal(m, b)
}
func (m *RGQLValueBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RGQLValueBatch.Marshal(b, m, deterministic)
}
func (dst *RGQLValueBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGQLValueBatch.Merge(dst, src)
}
func (m *RGQLValueBatch) XXX_Size() int {
	return xxx_messageInfo_RGQLValueBatch.Size(m)
}
func (m *RGQLValueBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_RGQLValueBatch.DiscardUnknown(m)
}

var xxx_messageInfo_RGQLValueBatch proto.InternalMessageInfo

func (m *RGQLValueBatch) GetResultId() uint32 {
	if m != nil {
		return m.ResultId
	}
	return 0
}

func (m *RGQLValueBatch) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*RGQLQueryFieldDirective)(nil), "rgraphql.RGQLQueryFieldDirective")
	proto.RegisterType((*RGQLQueryTreeNode)(nil), "rgraphql.RGQLQueryTreeNode")
	proto.RegisterType((*FieldArgument)(nil), "rgraphql.FieldArgument")
	proto.RegisterType((*ASTVariable)(nil), "rgraphql.ASTVariable")
	proto.RegisterType((*RGQLPrimitive)(nil), "rgraphql.RGQLPrimitive")
	proto.RegisterType((*RGQLClientMessage)(nil), "rgraphql.RGQLClientMessage")
	proto.RegisterType((*RGQLQueryInit)(nil), "rgraphql.RGQLQueryInit")
	proto.RegisterType((*RGQLQueryTreeMutation)(nil), "rgraphql.RGQLQueryTreeMutation")
	proto.RegisterType((*RGQLQueryTreeMutation_NodeMutation)(nil), "rgraphql.RGQLQueryTreeMutation.NodeMutation")
	proto.RegisterType((*RGQLQueryFinish)(nil), "rgraphql.RGQLQueryFinish")
	proto.RegisterType((*RGQLServerMessage)(nil), "rgraphql.RGQLServerMessage")
	proto.RegisterType((*RGQLValueInit)(nil), "rgraphql.RGQLValueInit")
	proto.RegisterType((*RGQLValueFinalize)(nil), "rgraphql.RGQLValueFinalize")
	proto.RegisterType((*RGQLQueryError)(nil), "rgraphql.RGQLQueryError")
	proto.RegisterType((*RGQLValue)(nil), "rgraphql.RGQLValue")
	proto.RegisterType((*RGQLValueBatch)(nil), "rgraphql.RGQLValueBatch")
	proto.RegisterEnum("rgraphql.RGQLPrimitive_Kind", RGQLPrimitive_Kind_name, RGQLPrimitive_Kind_value)
	proto.RegisterEnum("rgraphql.RGQLQueryTreeMutation_SubtreeOperation", RGQLQueryTreeMutation_SubtreeOperation_name, RGQLQueryTreeMutation_SubtreeOperation_value)
	proto.RegisterEnum("rgraphql.RGQLValueInit_CacheStrategy", RGQLValueInit_CacheStrategy_name, RGQLValueInit_CacheStrategy_value)
}

func init() { proto.RegisterFile("rgraphql.proto", fileDescriptor_rgraphql_326bcf8c9762af64) }

var fileDescriptor_rgraphql_326bcf8c9762af64 = []byte{
	// 1068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xfa, 0x27, 0xf5, 0x1e, 0x67, 0xcd, 0x76, 0x68, 0x1a, 0x87, 0x52, 0x92, 0xae, 0x54,
	0x29, 0x12, 0x25, 0x44, 0xa9, 0x04, 0x42, 0x02, 0x81, 0x63, 0x3b, 0xed, 0x52, 0xc7, 0x69, 0xc6,
	0x4e, 0x24, 0xb8, 0x59, 0x6d, 0xbc, 0x63, 0x67, 0xc4, 0x66, 0xd7, 0x99, 0x5d, 0x5b, 0x84, 0x7b,
	0xde, 0x84, 0x0b, 0x9e, 0x01, 0xf1, 0x06, 0xdc, 0xf2, 0x12, 0xbc, 0x04, 0xaa, 0xe6, 0xcc, 0xfe,
	0xd8, 0xb1, 0xe3, 0xf6, 0x6e, 0xce, 0x99, 0xef, 0x3b, 0x7f, 0x73, 0xce, 0xd9, 0x85, 0x9a, 0x18,
	0x09, 0x77, 0x7c, 0x75, 0xe3, 0xef, 0x8f, 0x45, 0x18, 0x87, 0xa4, 0x92, 0xca, 0xd6, 0xcf, 0xb0,
	0x45, 0x5f, 0x9d, 0x75, 0xce, 0x26, 0x4c, 0xdc, 0x1e, 0x73, 0xe6, 0x7b, 0x2d, 0x2e, 0xd8, 0x20,
	0xe6, 0x53, 0x46, 0x08, 0x94, 0x02, 0xf7, 0x9a, 0xd5, 0xb5, 0x5d, 0x6d, 0x4f, 0xa7, 0x78, 0x26,
	0x9f, 0x43, 0xc9, 0x15, 0xa3, 0xa8, 0x5e, 0xd8, 0x2d, 0xee, 0x55, 0x0f, 0xb7, 0xf6, 0x33, 0xbb,
	0xc8, 0x6d, 0x88, 0xd1, 0xe4, 0x9a, 0x05, 0x31, 0x45, 0x90, 0xf5, 0x9f, 0x06, 0x0f, 0x33, 0xe3,
	0x7d, 0xc1, 0x58, 0x37, 0xf4, 0x18, 0xa9, 0x41, 0x81, 0x7b, 0x68, 0xd4, 0xa0, 0x05, 0xee, 0x91,
	0xa7, 0x00, 0x43, 0x49, 0x76, 0xd0, 0x59, 0x01, 0x9d, 0xe9, 0xa8, 0xe9, 0xce, 0x7a, 0x2c, 0x7e,
	0x80, 0x47, 0xf2, 0x3d, 0xe8, 0x5e, 0x1a, 0x7f, 0xbd, 0x84, 0x8c, 0x67, 0x39, 0xe3, 0x9e, 0x44,
	0x69, 0xce, 0x21, 0x5f, 0x43, 0x65, 0x70, 0xc5, 0x7d, 0x4f, 0xb0, 0xa0, 0x5e, 0x46, 0xfe, 0x93,
	0x25, 0xfc, 0x34, 0x17, 0x9a, 0x81, 0xad, 0x16, 0x18, 0x73, 0x01, 0x2d, 0xad, 0xde, 0x0e, 0x54,
	0xa7, 0xae, 0xe0, 0xee, 0xa5, 0xcf, 0x1c, 0xee, 0x61, 0xae, 0x06, 0x85, 0x54, 0x65, 0x7b, 0x56,
	0x07, 0xaa, 0x8d, 0x5e, 0xff, 0x22, 0x51, 0x2c, 0x94, 0xea, 0x0b, 0x28, 0x4f, 0x5d, 0x7f, 0xa2,
	0xaa, 0x34, 0x57, 0x0c, 0x19, 0xda, 0x5b, 0xc1, 0xaf, 0x39, 0x26, 0xa4, 0x50, 0xd6, 0xff, 0x05,
	0x30, 0xe6, 0x2e, 0xc8, 0x01, 0x94, 0x7e, 0xe1, 0x81, 0x32, 0x59, 0x3b, 0xfc, 0xf4, 0x1e, 0xfe,
	0xfe, 0x1b, 0x1e, 0x78, 0x14, 0x91, 0xe4, 0x09, 0xe8, 0x3c, 0x88, 0x9d, 0xdc, 0x6d, 0x99, 0x56,
	0x78, 0x10, 0x5f, 0x48, 0x59, 0xe6, 0x33, 0xf4, 0x43, 0x37, 0xbd, 0x2e, 0xee, 0x6a, 0x7b, 0x1a,
	0x05, 0x54, 0x29, 0xc0, 0x33, 0xd8, 0x88, 0x62, 0xc1, 0x83, 0x51, 0x82, 0x28, 0x61, 0x31, 0xaa,
	0x4a, 0xa7, 0x20, 0x4f, 0x01, 0x2e, 0xc3, 0xd0, 0x4f, 0x00, 0xe5, 0x5d, 0x6d, 0xaf, 0x42, 0x75,
	0xa9, 0xc1, 0x6b, 0xeb, 0x2f, 0x0d, 0x4a, 0x32, 0x1c, 0xb2, 0x05, 0x1f, 0xbf, 0xa5, 0xf6, 0x89,
	0xdd, 0xb7, 0x2f, 0xda, 0xce, 0x1b, 0xbb, 0xdb, 0x72, 0xba, 0xe7, 0x9d, 0x8e, 0xb9, 0x46, 0x1e,
	0x03, 0xb9, 0x73, 0x61, 0x77, 0xfb, 0xa6, 0x46, 0xea, 0xf0, 0xe8, 0x8e, 0xfe, 0xb8, 0x73, 0xda,
	0xe8, 0x9b, 0x05, 0xb2, 0x0d, 0x9b, 0x77, 0x6e, 0x7a, 0x7d, 0x6a, 0x77, 0x5f, 0x99, 0xc5, 0x25,
	0x5e, 0x8e, 0x4e, 0x4f, 0x3b, 0x66, 0x69, 0x09, 0xe7, 0xf4, 0xe8, 0xc7, 0x76, 0xb3, 0x6f, 0x96,
	0x97, 0x38, 0x6a, 0x50, 0xda, 0xf8, 0xc9, 0x5c, 0xb7, 0xfe, 0x49, 0x06, 0xa0, 0xe9, 0x73, 0x16,
	0xc4, 0x27, 0x2c, 0x8a, 0xdc, 0x11, 0x23, 0x5f, 0x01, 0xf0, 0x80, 0xc7, 0xce, 0x8d, 0x6c, 0x25,
	0x7c, 0x8a, 0x85, 0xa7, 0xc4, 0x2e, 0xb3, 0x03, 0x1e, 0x53, 0x5d, 0x42, 0x51, 0x24, 0x3f, 0x40,
	0xf5, 0x7a, 0x12, 0xbb, 0x31, 0x73, 0x62, 0xc1, 0xd2, 0x1e, 0xd8, 0xb9, 0xa7, 0x3d, 0x4f, 0x24,
	0x92, 0x87, 0x01, 0x05, 0xc5, 0x91, 0x3a, 0xf2, 0x2d, 0x6c, 0x0c, 0x79, 0xc0, 0xa3, 0xab, 0xc4,
	0x77, 0x11, 0x4d, 0x6c, 0x2f, 0x9d, 0x10, 0x09, 0xa3, 0x55, 0x05, 0x47, 0x95, 0x15, 0xab, 0x6e,
	0xca, 0x62, 0x23, 0xdb, 0x50, 0x41, 0x3b, 0x4e, 0xd6, 0xa4, 0x0f, 0x50, 0xb6, 0x3d, 0xf9, 0xf0,
	0xc3, 0x50, 0x0c, 0x98, 0x13, 0x31, 0xc1, 0x5d, 0x1f, 0x83, 0xad, 0xd0, 0x2a, 0xea, 0x7a, 0xa8,
	0x22, 0xcf, 0xa1, 0x16, 0x8e, 0x99, 0xc0, 0x28, 0x9d, 0xf8, 0x76, 0xac, 0xfa, 0x47, 0xa7, 0x46,
	0xa6, 0xed, 0xdf, 0x8e, 0x99, 0xf5, 0x47, 0x11, 0x36, 0x97, 0x66, 0xb6, 0xca, 0xfd, 0x19, 0x18,
	0x41, 0xe8, 0x31, 0xe7, 0x3a, 0xc1, 0x26, 0xfb, 0xea, 0xc5, 0x7b, 0x8a, 0xb5, 0x2f, 0x87, 0x3a,
	0xab, 0xdc, 0x46, 0x30, 0x23, 0x91, 0x97, 0xa0, 0xa7, 0x83, 0x9a, 0x2e, 0xa3, 0xcd, 0xdc, 0xdc,
	0xcc, 0xd4, 0xd2, 0x1c, 0xf7, 0xc9, 0x9f, 0x1a, 0x6c, 0xcc, 0xda, 0x24, 0x5b, 0xf0, 0x00, 0x03,
	0xcb, 0x42, 0x5e, 0x97, 0xa2, 0xed, 0x91, 0x2e, 0xe8, 0x59, 0xde, 0x58, 0xad, 0xda, 0xe1, 0xc1,
	0xfb, 0xa2, 0xed, 0x4d, 0x2e, 0x65, 0x27, 0x9c, 0xa6, 0x3c, 0x9a, 0x9b, 0x20, 0x5f, 0x42, 0x49,
	0x5a, 0x4e, 0x9e, 0x78, 0xe5, 0x12, 0x43, 0xa0, 0xf5, 0x1d, 0x98, 0x77, 0xed, 0x91, 0x4d, 0x78,
	0xd8, 0x3b, 0x3f, 0xea, 0xd3, 0x76, 0xdb, 0x69, 0xb4, 0x5a, 0x4e, 0xf3, 0xb5, 0xdd, 0x69, 0x99,
	0x6b, 0x84, 0x40, 0x2d, 0x55, 0xb7, 0xda, 0x9d, 0x76, 0xbf, 0x6d, 0x6a, 0xd6, 0x0b, 0xf8, 0xe8,
	0x4e, 0xf3, 0xac, 0x78, 0x1f, 0xeb, 0xf7, 0x82, 0x1a, 0x8c, 0x1e, 0x13, 0x53, 0x26, 0xd2, 0xc1,
	0xf8, 0x06, 0xaa, 0x8a, 0xc0, 0x84, 0x08, 0x45, 0xd2, 0xe0, 0xf5, 0x25, 0xa1, 0xb7, 0xe5, 0x3d,
	0x85, 0x9b, 0xec, 0x2c, 0x67, 0x0a, 0x17, 0x88, 0x23, 0xc7, 0x05, 0xd7, 0xcc, 0xc2, 0x4c, 0xe1,
	0x3e, 0x51, 0x33, 0x35, 0x4d, 0x8f, 0xd2, 0xa5, 0xe2, 0x5d, 0xba, 0xf1, 0xe0, 0x0a, 0xd7, 0xcf,
	0x82, 0x4b, 0x24, 0x1e, 0xc9, 0x7b, 0xaa, 0x9c, 0xe0, 0x99, 0x1c, 0x41, 0x4d, 0x51, 0x87, 0x3c,
	0x70, 0x7d, 0xfe, 0x1b, 0xab, 0xaf, 0x2f, 0xab, 0x35, 0xb2, 0x8f, 0x13, 0x08, 0x35, 0xa6, 0xb3,
	0xa2, 0xf5, 0xaf, 0xa6, 0x66, 0x2a, 0x8b, 0x4d, 0xee, 0x5b, 0xc1, 0xa2, 0x89, 0x1f, 0xe7, 0x55,
	0xab, 0x28, 0x85, 0xed, 0xcd, 0x55, 0xb4, 0x30, 0xdf, 0xf1, 0x1d, 0xa8, 0x0d, 0xdc, 0xc1, 0x15,
	0x73, 0xa2, 0x58, 0xb8, 0x31, 0x1b, 0xa9, 0xe1, 0xae, 0x1d, 0x3e, 0xbf, 0xa7, 0x08, 0xfb, 0x4d,
	0x89, 0xee, 0x25, 0x60, 0x6a, 0x0c, 0x66, 0x45, 0xb9, 0x94, 0x13, 0x6b, 0x32, 0xaf, 0x12, 0xba,
	0xd2, 0x15, 0x44, 0x86, 0xfd, 0x19, 0x18, 0x73, 0x74, 0x62, 0x80, 0xde, 0x6c, 0x34, 0x5f, 0xb7,
	0x9d, 0x0e, 0x3d, 0x37, 0xd7, 0xac, 0x03, 0xf5, 0xba, 0x73, 0xa9, 0xaf, 0xcc, 0xcc, 0x62, 0x50,
	0x9b, 0x7f, 0xdd, 0x55, 0xd3, 0x6d, 0x81, 0xa1, 0xae, 0xd2, 0x51, 0x52, 0xb5, 0x50, 0xcd, 0xd3,
	0x55, 0xf3, 0xf4, 0x08, 0xca, 0xaa, 0x8b, 0xd4, 0x52, 0x51, 0x82, 0xf5, 0xb7, 0x06, 0x7a, 0x16,
	0xd9, 0xa2, 0x1d, 0x6d, 0xd1, 0xce, 0x0e, 0x54, 0x5d, 0x21, 0xdc, 0x5b, 0x87, 0x07, 0x1e, 0xfb,
	0x35, 0xfd, 0x64, 0xa3, 0xca, 0x96, 0x1a, 0xb9, 0xc6, 0xc6, 0x61, 0xe4, 0x70, 0x8f, 0x05, 0x31,
	0x1f, 0x72, 0xa6, 0x3c, 0x1a, 0xd4, 0x18, 0x87, 0x91, 0x9d, 0x29, 0xf3, 0x4f, 0x77, 0xe9, 0x43,
	0x3e, 0xdd, 0x79, 0xf8, 0xe5, 0xd9, 0xf0, 0xdb, 0xaa, 0x4a, 0x79, 0x43, 0xae, 0x6e, 0x97, 0xc7,
	0xb0, 0x8e, 0xd6, 0xd4, 0xef, 0xda, 0x06, 0x4d, 0xa4, 0xcb, 0x75, 0xfc, 0x09, 0x7c, 0xf9, 0x2e,
	0x00, 0x00, 0xff, 0xff, 0xcf, 0xb9, 0x7c, 0xae, 0x16, 0x0a, 0x00, 0x00,
}
