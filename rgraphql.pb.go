// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.19.3
// source: github.com/rgraphql/rgraphql/rgraphql.proto

package rgraphql

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RGQLPrimitive_Kind int32

const (
	RGQLPrimitive_PRIMITIVE_KIND_NULL   RGQLPrimitive_Kind = 0
	RGQLPrimitive_PRIMITIVE_KIND_INT    RGQLPrimitive_Kind = 1
	RGQLPrimitive_PRIMITIVE_KIND_FLOAT  RGQLPrimitive_Kind = 2
	RGQLPrimitive_PRIMITIVE_KIND_STRING RGQLPrimitive_Kind = 3
	RGQLPrimitive_PRIMITIVE_KIND_BOOL   RGQLPrimitive_Kind = 4
	RGQLPrimitive_PRIMITIVE_KIND_OBJECT RGQLPrimitive_Kind = 5
	// A marker for an empty array.
	RGQLPrimitive_PRIMITIVE_KIND_ARRAY RGQLPrimitive_Kind = 6
)

// Enum value maps for RGQLPrimitive_Kind.
var (
	RGQLPrimitive_Kind_name = map[int32]string{
		0: "PRIMITIVE_KIND_NULL",
		1: "PRIMITIVE_KIND_INT",
		2: "PRIMITIVE_KIND_FLOAT",
		3: "PRIMITIVE_KIND_STRING",
		4: "PRIMITIVE_KIND_BOOL",
		5: "PRIMITIVE_KIND_OBJECT",
		6: "PRIMITIVE_KIND_ARRAY",
	}
	RGQLPrimitive_Kind_value = map[string]int32{
		"PRIMITIVE_KIND_NULL":   0,
		"PRIMITIVE_KIND_INT":    1,
		"PRIMITIVE_KIND_FLOAT":  2,
		"PRIMITIVE_KIND_STRING": 3,
		"PRIMITIVE_KIND_BOOL":   4,
		"PRIMITIVE_KIND_OBJECT": 5,
		"PRIMITIVE_KIND_ARRAY":  6,
	}
)

func (x RGQLPrimitive_Kind) Enum() *RGQLPrimitive_Kind {
	p := new(RGQLPrimitive_Kind)
	*p = x
	return p
}

func (x RGQLPrimitive_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RGQLPrimitive_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_enumTypes[0].Descriptor()
}

func (RGQLPrimitive_Kind) Type() protoreflect.EnumType {
	return &file_github_com_rgraphql_rgraphql_rgraphql_proto_enumTypes[0]
}

func (x RGQLPrimitive_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RGQLPrimitive_Kind.Descriptor instead.
func (RGQLPrimitive_Kind) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{4, 0}
}

type RGQLQueryTreeMutation_SubtreeOperation int32

const (
	// Add a child tree to the subtree.
	RGQLQueryTreeMutation_SUBTREE_ADD_CHILD RGQLQueryTreeMutation_SubtreeOperation = 0
	// Delete a tree node and all children.
	RGQLQueryTreeMutation_SUBTREE_DELETE RGQLQueryTreeMutation_SubtreeOperation = 1
)

// Enum value maps for RGQLQueryTreeMutation_SubtreeOperation.
var (
	RGQLQueryTreeMutation_SubtreeOperation_name = map[int32]string{
		0: "SUBTREE_ADD_CHILD",
		1: "SUBTREE_DELETE",
	}
	RGQLQueryTreeMutation_SubtreeOperation_value = map[string]int32{
		"SUBTREE_ADD_CHILD": 0,
		"SUBTREE_DELETE":    1,
	}
)

func (x RGQLQueryTreeMutation_SubtreeOperation) Enum() *RGQLQueryTreeMutation_SubtreeOperation {
	p := new(RGQLQueryTreeMutation_SubtreeOperation)
	*p = x
	return p
}

func (x RGQLQueryTreeMutation_SubtreeOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RGQLQueryTreeMutation_SubtreeOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_enumTypes[1].Descriptor()
}

func (RGQLQueryTreeMutation_SubtreeOperation) Type() protoreflect.EnumType {
	return &file_github_com_rgraphql_rgraphql_rgraphql_proto_enumTypes[1]
}

func (x RGQLQueryTreeMutation_SubtreeOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RGQLQueryTreeMutation_SubtreeOperation.Descriptor instead.
func (RGQLQueryTreeMutation_SubtreeOperation) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{7, 0}
}

type RGQLValueInit_CacheStrategy int32

const (
	RGQLValueInit_CACHE_LRU RGQLValueInit_CacheStrategy = 0
)

// Enum value maps for RGQLValueInit_CacheStrategy.
var (
	RGQLValueInit_CacheStrategy_name = map[int32]string{
		0: "CACHE_LRU",
	}
	RGQLValueInit_CacheStrategy_value = map[string]int32{
		"CACHE_LRU": 0,
	}
)

func (x RGQLValueInit_CacheStrategy) Enum() *RGQLValueInit_CacheStrategy {
	p := new(RGQLValueInit_CacheStrategy)
	*p = x
	return p
}

func (x RGQLValueInit_CacheStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RGQLValueInit_CacheStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_enumTypes[2].Descriptor()
}

func (RGQLValueInit_CacheStrategy) Type() protoreflect.EnumType {
	return &file_github_com_rgraphql_rgraphql_rgraphql_proto_enumTypes[2]
}

func (x RGQLValueInit_CacheStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RGQLValueInit_CacheStrategy.Descriptor instead.
func (RGQLValueInit_CacheStrategy) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{10, 0}
}

type RGQLQueryFieldDirective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Directive name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional arguments.
	Args []*FieldArgument `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *RGQLQueryFieldDirective) Reset() {
	*x = RGQLQueryFieldDirective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLQueryFieldDirective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLQueryFieldDirective) ProtoMessage() {}

func (x *RGQLQueryFieldDirective) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLQueryFieldDirective.ProtoReflect.Descriptor instead.
func (*RGQLQueryFieldDirective) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{0}
}

func (x *RGQLQueryFieldDirective) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RGQLQueryFieldDirective) GetArgs() []*FieldArgument {
	if x != nil {
		return x.Args
	}
	return nil
}

type RGQLQueryTreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Integer ID of the node.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the field this node represents.
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// Arguments.
	Args []*FieldArgument `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Directives
	Directive []*RGQLQueryFieldDirective `protobuf:"bytes,4,rep,name=directive,proto3" json:"directive,omitempty"`
	// Children
	Children []*RGQLQueryTreeNode `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *RGQLQueryTreeNode) Reset() {
	*x = RGQLQueryTreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLQueryTreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLQueryTreeNode) ProtoMessage() {}

func (x *RGQLQueryTreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLQueryTreeNode.ProtoReflect.Descriptor instead.
func (*RGQLQueryTreeNode) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{1}
}

func (x *RGQLQueryTreeNode) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RGQLQueryTreeNode) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *RGQLQueryTreeNode) GetArgs() []*FieldArgument {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RGQLQueryTreeNode) GetDirective() []*RGQLQueryFieldDirective {
	if x != nil {
		return x.Directive
	}
	return nil
}

func (x *RGQLQueryTreeNode) GetChildren() []*RGQLQueryTreeNode {
	if x != nil {
		return x.Children
	}
	return nil
}

type FieldArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VariableId uint32 `protobuf:"varint,2,opt,name=variable_id,json=variableId,proto3" json:"variable_id,omitempty"`
}

func (x *FieldArgument) Reset() {
	*x = FieldArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldArgument) ProtoMessage() {}

func (x *FieldArgument) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldArgument.ProtoReflect.Descriptor instead.
func (*FieldArgument) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{2}
}

func (x *FieldArgument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldArgument) GetVariableId() uint32 {
	if x != nil {
		return x.VariableId
	}
	return 0
}

type ASTVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *RGQLPrimitive `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ASTVariable) Reset() {
	*x = ASTVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTVariable) ProtoMessage() {}

func (x *ASTVariable) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTVariable.ProtoReflect.Descriptor instead.
func (*ASTVariable) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{3}
}

func (x *ASTVariable) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ASTVariable) GetValue() *RGQLPrimitive {
	if x != nil {
		return x.Value
	}
	return nil
}

type RGQLPrimitive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind        RGQLPrimitive_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=rgraphql.RGQLPrimitive_Kind" json:"kind,omitempty"`
	IntValue    int32              `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3" json:"int_value,omitempty"`
	FloatValue  float64            `protobuf:"fixed64,3,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	StringValue string             `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BoolValue   bool               `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
}

func (x *RGQLPrimitive) Reset() {
	*x = RGQLPrimitive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLPrimitive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLPrimitive) ProtoMessage() {}

func (x *RGQLPrimitive) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLPrimitive.ProtoReflect.Descriptor instead.
func (*RGQLPrimitive) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{4}
}

func (x *RGQLPrimitive) GetKind() RGQLPrimitive_Kind {
	if x != nil {
		return x.Kind
	}
	return RGQLPrimitive_PRIMITIVE_KIND_NULL
}

func (x *RGQLPrimitive) GetIntValue() int32 {
	if x != nil {
		return x.IntValue
	}
	return 0
}

func (x *RGQLPrimitive) GetFloatValue() float64 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *RGQLPrimitive) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *RGQLPrimitive) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

// Messages
type RGQLClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitQuery   *RGQLQueryInit         `protobuf:"bytes,1,opt,name=init_query,json=initQuery,proto3" json:"init_query,omitempty"`
	MutateTree  *RGQLQueryTreeMutation `protobuf:"bytes,2,opt,name=mutate_tree,json=mutateTree,proto3" json:"mutate_tree,omitempty"`
	FinishQuery *RGQLQueryFinish       `protobuf:"bytes,3,opt,name=finish_query,json=finishQuery,proto3" json:"finish_query,omitempty"`
}

func (x *RGQLClientMessage) Reset() {
	*x = RGQLClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLClientMessage) ProtoMessage() {}

func (x *RGQLClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLClientMessage.ProtoReflect.Descriptor instead.
func (*RGQLClientMessage) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{5}
}

func (x *RGQLClientMessage) GetInitQuery() *RGQLQueryInit {
	if x != nil {
		return x.InitQuery
	}
	return nil
}

func (x *RGQLClientMessage) GetMutateTree() *RGQLQueryTreeMutation {
	if x != nil {
		return x.MutateTree
	}
	return nil
}

func (x *RGQLClientMessage) GetFinishQuery() *RGQLQueryFinish {
	if x != nil {
		return x.FinishQuery
	}
	return nil
}

type RGQLQueryInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this query.
	QueryId uint32 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Force serial for this query?
	// Note: serial queries execute as soon as the first mutation arrives, and cannot be updated.
	ForceSerial bool `protobuf:"varint,2,opt,name=force_serial,json=forceSerial,proto3" json:"force_serial,omitempty"`
	// Operation type, i.e. query, mutation, etc.
	OperationType string `protobuf:"bytes,3,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
}

func (x *RGQLQueryInit) Reset() {
	*x = RGQLQueryInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLQueryInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLQueryInit) ProtoMessage() {}

func (x *RGQLQueryInit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLQueryInit.ProtoReflect.Descriptor instead.
func (*RGQLQueryInit) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{6}
}

func (x *RGQLQueryInit) GetQueryId() uint32 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *RGQLQueryInit) GetForceSerial() bool {
	if x != nil {
		return x.ForceSerial
	}
	return false
}

func (x *RGQLQueryInit) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

type RGQLQueryTreeMutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this query.
	QueryId uint32 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// All node mutations in this step.
	NodeMutation []*RGQLQueryTreeMutation_NodeMutation `protobuf:"bytes,2,rep,name=node_mutation,json=nodeMutation,proto3" json:"node_mutation,omitempty"`
	// Any new variables.
	Variables []*ASTVariable `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *RGQLQueryTreeMutation) Reset() {
	*x = RGQLQueryTreeMutation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLQueryTreeMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLQueryTreeMutation) ProtoMessage() {}

func (x *RGQLQueryTreeMutation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLQueryTreeMutation.ProtoReflect.Descriptor instead.
func (*RGQLQueryTreeMutation) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{7}
}

func (x *RGQLQueryTreeMutation) GetQueryId() uint32 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *RGQLQueryTreeMutation) GetNodeMutation() []*RGQLQueryTreeMutation_NodeMutation {
	if x != nil {
		return x.NodeMutation
	}
	return nil
}

func (x *RGQLQueryTreeMutation) GetVariables() []*ASTVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

type RGQLQueryFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this query.
	QueryId uint32 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *RGQLQueryFinish) Reset() {
	*x = RGQLQueryFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLQueryFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLQueryFinish) ProtoMessage() {}

func (x *RGQLQueryFinish) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLQueryFinish.ProtoReflect.Descriptor instead.
func (*RGQLQueryFinish) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{8}
}

func (x *RGQLQueryFinish) GetQueryId() uint32 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

type RGQLServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryError    *RGQLQueryError    `protobuf:"bytes,2,opt,name=query_error,json=queryError,proto3" json:"query_error,omitempty"`
	ValueInit     *RGQLValueInit     `protobuf:"bytes,4,opt,name=value_init,json=valueInit,proto3" json:"value_init,omitempty"`
	ValueBatch    *RGQLValueBatch    `protobuf:"bytes,5,opt,name=value_batch,json=valueBatch,proto3" json:"value_batch,omitempty"`
	ValueFinalize *RGQLValueFinalize `protobuf:"bytes,6,opt,name=value_finalize,json=valueFinalize,proto3" json:"value_finalize,omitempty"`
}

func (x *RGQLServerMessage) Reset() {
	*x = RGQLServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLServerMessage) ProtoMessage() {}

func (x *RGQLServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLServerMessage.ProtoReflect.Descriptor instead.
func (*RGQLServerMessage) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{9}
}

func (x *RGQLServerMessage) GetQueryError() *RGQLQueryError {
	if x != nil {
		return x.QueryError
	}
	return nil
}

func (x *RGQLServerMessage) GetValueInit() *RGQLValueInit {
	if x != nil {
		return x.ValueInit
	}
	return nil
}

func (x *RGQLServerMessage) GetValueBatch() *RGQLValueBatch {
	if x != nil {
		return x.ValueBatch
	}
	return nil
}

func (x *RGQLServerMessage) GetValueFinalize() *RGQLValueFinalize {
	if x != nil {
		return x.ValueFinalize
	}
	return nil
}

// RGQLValueInit initializes a result value tree.
type RGQLValueInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result_id is the identifier for the result tree.
	ResultId uint32 `protobuf:"varint,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// query_id is the identifier for the corresponding query.
	QueryId uint32 `protobuf:"varint,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// cache_strategy is the strategy used for the path cache.
	CacheStrategy RGQLValueInit_CacheStrategy `protobuf:"varint,3,opt,name=cache_strategy,json=cacheStrategy,proto3,enum=rgraphql.RGQLValueInit_CacheStrategy" json:"cache_strategy,omitempty"`
	// cache_size is the size of the path cache, if necessary.
	CacheSize uint32 `protobuf:"varint,4,opt,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty"`
}

func (x *RGQLValueInit) Reset() {
	*x = RGQLValueInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLValueInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLValueInit) ProtoMessage() {}

func (x *RGQLValueInit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLValueInit.ProtoReflect.Descriptor instead.
func (*RGQLValueInit) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{10}
}

func (x *RGQLValueInit) GetResultId() uint32 {
	if x != nil {
		return x.ResultId
	}
	return 0
}

func (x *RGQLValueInit) GetQueryId() uint32 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *RGQLValueInit) GetCacheStrategy() RGQLValueInit_CacheStrategy {
	if x != nil {
		return x.CacheStrategy
	}
	return RGQLValueInit_CACHE_LRU
}

func (x *RGQLValueInit) GetCacheSize() uint32 {
	if x != nil {
		return x.CacheSize
	}
	return 0
}

// RGQLValueFinalize finalizes a result tree.
type RGQLValueFinalize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultId uint32 `protobuf:"varint,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
}

func (x *RGQLValueFinalize) Reset() {
	*x = RGQLValueFinalize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLValueFinalize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLValueFinalize) ProtoMessage() {}

func (x *RGQLValueFinalize) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLValueFinalize.ProtoReflect.Descriptor instead.
func (*RGQLValueFinalize) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{11}
}

func (x *RGQLValueFinalize) GetResultId() uint32 {
	if x != nil {
		return x.ResultId
	}
	return 0
}

// Communicating a failure in the input query.
type RGQLQueryError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId     uint32 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryNodeId uint32 `protobuf:"varint,2,opt,name=query_node_id,json=queryNodeId,proto3" json:"query_node_id,omitempty"`
	Error       string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RGQLQueryError) Reset() {
	*x = RGQLQueryError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLQueryError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLQueryError) ProtoMessage() {}

func (x *RGQLQueryError) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLQueryError.ProtoReflect.Descriptor instead.
func (*RGQLQueryError) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{12}
}

func (x *RGQLQueryError) GetQueryId() uint32 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *RGQLQueryError) GetQueryNodeId() uint32 {
	if x != nil {
		return x.QueryNodeId
	}
	return 0
}

func (x *RGQLQueryError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RGQLValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the field in the query tree, if a field.
	QueryNodeId uint32 `protobuf:"varint,1,opt,name=query_node_id,json=queryNodeId,proto3" json:"query_node_id,omitempty"`
	// The 1-based index, if an array element.
	ArrayIndex uint32 `protobuf:"varint,2,opt,name=array_index,json=arrayIndex,proto3" json:"array_index,omitempty"`
	// If this is a 0-th index value, this is a pointer to a previous identifier.
	// Otherwise, this is an identifier for adding an alias to this path.
	PosIdentifier uint32 `protobuf:"varint,3,opt,name=pos_identifier,json=posIdentifier,proto3" json:"pos_identifier,omitempty"`
	// The value, if we have one.
	Value *RGQLPrimitive `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// The error, if we are erroring this field.
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RGQLValue) Reset() {
	*x = RGQLValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLValue) ProtoMessage() {}

func (x *RGQLValue) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLValue.ProtoReflect.Descriptor instead.
func (*RGQLValue) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{13}
}

func (x *RGQLValue) GetQueryNodeId() uint32 {
	if x != nil {
		return x.QueryNodeId
	}
	return 0
}

func (x *RGQLValue) GetArrayIndex() uint32 {
	if x != nil {
		return x.ArrayIndex
	}
	return 0
}

func (x *RGQLValue) GetPosIdentifier() uint32 {
	if x != nil {
		return x.PosIdentifier
	}
	return 0
}

func (x *RGQLValue) GetValue() *RGQLPrimitive {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RGQLValue) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RGQLValueBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the result tree this batch is for.
	ResultId uint32 `protobuf:"varint,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// The batch of RGQLValue values, encoded.
	Values [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RGQLValueBatch) Reset() {
	*x = RGQLValueBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLValueBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLValueBatch) ProtoMessage() {}

func (x *RGQLValueBatch) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLValueBatch.ProtoReflect.Descriptor instead.
func (*RGQLValueBatch) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{14}
}

func (x *RGQLValueBatch) GetResultId() uint32 {
	if x != nil {
		return x.ResultId
	}
	return 0
}

func (x *RGQLValueBatch) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type RGQLQueryTreeMutation_NodeMutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the node we are operating on.
	NodeId uint32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Operation we are taking.
	Operation RGQLQueryTreeMutation_SubtreeOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=rgraphql.RGQLQueryTreeMutation_SubtreeOperation" json:"operation,omitempty"`
	// The new node tree to add, if we are adding a child.
	Node *RGQLQueryTreeNode `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *RGQLQueryTreeMutation_NodeMutation) Reset() {
	*x = RGQLQueryTreeMutation_NodeMutation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGQLQueryTreeMutation_NodeMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGQLQueryTreeMutation_NodeMutation) ProtoMessage() {}

func (x *RGQLQueryTreeMutation_NodeMutation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGQLQueryTreeMutation_NodeMutation.ProtoReflect.Descriptor instead.
func (*RGQLQueryTreeMutation_NodeMutation) Descriptor() ([]byte, []int) {
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RGQLQueryTreeMutation_NodeMutation) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *RGQLQueryTreeMutation_NodeMutation) GetOperation() RGQLQueryTreeMutation_SubtreeOperation {
	if x != nil {
		return x.Operation
	}
	return RGQLQueryTreeMutation_SUBTREE_ADD_CHILD
}

func (x *RGQLQueryTreeMutation_NodeMutation) GetNode() *RGQLQueryTreeNode {
	if x != nil {
		return x.Node
	}
	return nil
}

var File_github_com_rgraphql_rgraphql_rgraphql_proto protoreflect.FileDescriptor

var file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x2f, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2f, 0x72,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x22, 0x5a, 0x0a, 0x17, 0x52, 0x47, 0x51, 0x4c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x11, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22,
	0x44, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x0b, 0x41, 0x53, 0x54, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x52,
	0x47, 0x51, 0x4c, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x0d, 0x52, 0x47, 0x51, 0x4c, 0x50, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x52,
	0x47, 0x51, 0x4c, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x49,
	0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52,
	0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x10, 0x06, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x52, 0x47, 0x51, 0x4c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x22, 0x74, 0x0a, 0x0d, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x15, 0x52, 0x47, 0x51,
	0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e,
	0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x41,
	0x53, 0x54, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x4e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47,
	0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x22, 0x3d, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x42, 0x54, 0x52, 0x45, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x55, 0x42, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x22,
	0x2c, 0x0a, 0x0f, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x85, 0x02,
	0x0a, 0x11, 0x52, 0x47, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47,
	0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x42, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0d, 0x52, 0x47, 0x51, 0x4c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x69, 0x74,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0d,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x1e, 0x0a, 0x0d,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4c, 0x52, 0x55, 0x10, 0x00, 0x22, 0x30, 0x0a, 0x11,
	0x52, 0x47, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0x65,
	0x0a, 0x0e, 0x52, 0x47, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x09, 0x52, 0x47, 0x51, 0x4c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x6f, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x52, 0x47, 0x51, 0x4c, 0x50, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x45, 0x0a, 0x0e, 0x52, 0x47, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescOnce sync.Once
	file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescData = file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDesc
)

func file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescGZIP() []byte {
	file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescOnce.Do(func() {
		file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescData)
	})
	return file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDescData
}

var file_github_com_rgraphql_rgraphql_rgraphql_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_github_com_rgraphql_rgraphql_rgraphql_proto_goTypes = []interface{}{
	(RGQLPrimitive_Kind)(0),                     // 0: rgraphql.RGQLPrimitive.Kind
	(RGQLQueryTreeMutation_SubtreeOperation)(0), // 1: rgraphql.RGQLQueryTreeMutation.SubtreeOperation
	(RGQLValueInit_CacheStrategy)(0),            // 2: rgraphql.RGQLValueInit.CacheStrategy
	(*RGQLQueryFieldDirective)(nil),             // 3: rgraphql.RGQLQueryFieldDirective
	(*RGQLQueryTreeNode)(nil),                   // 4: rgraphql.RGQLQueryTreeNode
	(*FieldArgument)(nil),                       // 5: rgraphql.FieldArgument
	(*ASTVariable)(nil),                         // 6: rgraphql.ASTVariable
	(*RGQLPrimitive)(nil),                       // 7: rgraphql.RGQLPrimitive
	(*RGQLClientMessage)(nil),                   // 8: rgraphql.RGQLClientMessage
	(*RGQLQueryInit)(nil),                       // 9: rgraphql.RGQLQueryInit
	(*RGQLQueryTreeMutation)(nil),               // 10: rgraphql.RGQLQueryTreeMutation
	(*RGQLQueryFinish)(nil),                     // 11: rgraphql.RGQLQueryFinish
	(*RGQLServerMessage)(nil),                   // 12: rgraphql.RGQLServerMessage
	(*RGQLValueInit)(nil),                       // 13: rgraphql.RGQLValueInit
	(*RGQLValueFinalize)(nil),                   // 14: rgraphql.RGQLValueFinalize
	(*RGQLQueryError)(nil),                      // 15: rgraphql.RGQLQueryError
	(*RGQLValue)(nil),                           // 16: rgraphql.RGQLValue
	(*RGQLValueBatch)(nil),                      // 17: rgraphql.RGQLValueBatch
	(*RGQLQueryTreeMutation_NodeMutation)(nil),  // 18: rgraphql.RGQLQueryTreeMutation.NodeMutation
}
var file_github_com_rgraphql_rgraphql_rgraphql_proto_depIdxs = []int32{
	5,  // 0: rgraphql.RGQLQueryFieldDirective.args:type_name -> rgraphql.FieldArgument
	5,  // 1: rgraphql.RGQLQueryTreeNode.args:type_name -> rgraphql.FieldArgument
	3,  // 2: rgraphql.RGQLQueryTreeNode.directive:type_name -> rgraphql.RGQLQueryFieldDirective
	4,  // 3: rgraphql.RGQLQueryTreeNode.children:type_name -> rgraphql.RGQLQueryTreeNode
	7,  // 4: rgraphql.ASTVariable.value:type_name -> rgraphql.RGQLPrimitive
	0,  // 5: rgraphql.RGQLPrimitive.kind:type_name -> rgraphql.RGQLPrimitive.Kind
	9,  // 6: rgraphql.RGQLClientMessage.init_query:type_name -> rgraphql.RGQLQueryInit
	10, // 7: rgraphql.RGQLClientMessage.mutate_tree:type_name -> rgraphql.RGQLQueryTreeMutation
	11, // 8: rgraphql.RGQLClientMessage.finish_query:type_name -> rgraphql.RGQLQueryFinish
	18, // 9: rgraphql.RGQLQueryTreeMutation.node_mutation:type_name -> rgraphql.RGQLQueryTreeMutation.NodeMutation
	6,  // 10: rgraphql.RGQLQueryTreeMutation.variables:type_name -> rgraphql.ASTVariable
	15, // 11: rgraphql.RGQLServerMessage.query_error:type_name -> rgraphql.RGQLQueryError
	13, // 12: rgraphql.RGQLServerMessage.value_init:type_name -> rgraphql.RGQLValueInit
	17, // 13: rgraphql.RGQLServerMessage.value_batch:type_name -> rgraphql.RGQLValueBatch
	14, // 14: rgraphql.RGQLServerMessage.value_finalize:type_name -> rgraphql.RGQLValueFinalize
	2,  // 15: rgraphql.RGQLValueInit.cache_strategy:type_name -> rgraphql.RGQLValueInit.CacheStrategy
	7,  // 16: rgraphql.RGQLValue.value:type_name -> rgraphql.RGQLPrimitive
	1,  // 17: rgraphql.RGQLQueryTreeMutation.NodeMutation.operation:type_name -> rgraphql.RGQLQueryTreeMutation.SubtreeOperation
	4,  // 18: rgraphql.RGQLQueryTreeMutation.NodeMutation.node:type_name -> rgraphql.RGQLQueryTreeNode
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_github_com_rgraphql_rgraphql_rgraphql_proto_init() }
func file_github_com_rgraphql_rgraphql_rgraphql_proto_init() {
	if File_github_com_rgraphql_rgraphql_rgraphql_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLQueryFieldDirective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLQueryTreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLPrimitive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLQueryInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLQueryTreeMutation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLQueryFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLValueInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLValueFinalize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLQueryError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLValueBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGQLQueryTreeMutation_NodeMutation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_rgraphql_rgraphql_rgraphql_proto_goTypes,
		DependencyIndexes: file_github_com_rgraphql_rgraphql_rgraphql_proto_depIdxs,
		EnumInfos:         file_github_com_rgraphql_rgraphql_rgraphql_proto_enumTypes,
		MessageInfos:      file_github_com_rgraphql_rgraphql_rgraphql_proto_msgTypes,
	}.Build()
	File_github_com_rgraphql_rgraphql_rgraphql_proto = out.File
	file_github_com_rgraphql_rgraphql_rgraphql_proto_rawDesc = nil
	file_github_com_rgraphql_rgraphql_rgraphql_proto_goTypes = nil
	file_github_com_rgraphql_rgraphql_rgraphql_proto_depIdxs = nil
}
