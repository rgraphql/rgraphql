// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/rgraphql/rgraphql/rgraphql.proto (package rgraphql, syntax proto3)
/* eslint-disable */

import type { MessageType, PartialFieldInfo } from '@aptre/protobuf-es-lite'
import { createEnumType, createMessageType, Message, ScalarType } from '@aptre/protobuf-es-lite'

export const protobufPackage = 'rgraphql'

/**
 * @generated from enum rgraphql.RGQLPrimitive.Kind
 */
export enum RGQLPrimitive_Kind {
  /**
   * @generated from enum value: PRIMITIVE_KIND_NULL = 0;
   */
  PRIMITIVE_KIND_NULL = 0,

  /**
   * @generated from enum value: PRIMITIVE_KIND_INT = 1;
   */
  PRIMITIVE_KIND_INT = 1,

  /**
   * @generated from enum value: PRIMITIVE_KIND_FLOAT = 2;
   */
  PRIMITIVE_KIND_FLOAT = 2,

  /**
   * @generated from enum value: PRIMITIVE_KIND_STRING = 3;
   */
  PRIMITIVE_KIND_STRING = 3,

  /**
   * @generated from enum value: PRIMITIVE_KIND_BOOL = 4;
   */
  PRIMITIVE_KIND_BOOL = 4,

  /**
   * @generated from enum value: PRIMITIVE_KIND_OBJECT = 5;
   */
  PRIMITIVE_KIND_OBJECT = 5,

  /**
   * A marker for an empty array.
   *
   * @generated from enum value: PRIMITIVE_KIND_ARRAY = 6;
   */
  PRIMITIVE_KIND_ARRAY = 6,
}

// RGQLPrimitive_Kind_Enum is the enum type for RGQLPrimitive_Kind.
export const RGQLPrimitive_Kind_Enum = createEnumType('rgraphql.RGQLPrimitive.Kind', [
  { no: 0, name: 'PRIMITIVE_KIND_NULL' },
  { no: 1, name: 'PRIMITIVE_KIND_INT' },
  { no: 2, name: 'PRIMITIVE_KIND_FLOAT' },
  { no: 3, name: 'PRIMITIVE_KIND_STRING' },
  { no: 4, name: 'PRIMITIVE_KIND_BOOL' },
  { no: 5, name: 'PRIMITIVE_KIND_OBJECT' },
  { no: 6, name: 'PRIMITIVE_KIND_ARRAY' },
])

/**
 * @generated from enum rgraphql.RGQLQueryTreeMutation.SubtreeOperation
 */
export enum RGQLQueryTreeMutation_SubtreeOperation {
  /**
   * Add a child tree to the subtree.
   *
   * @generated from enum value: SUBTREE_ADD_CHILD = 0;
   */
  SUBTREE_ADD_CHILD = 0,

  /**
   * Delete a tree node and all children.
   *
   * @generated from enum value: SUBTREE_DELETE = 1;
   */
  SUBTREE_DELETE = 1,
}

// RGQLQueryTreeMutation_SubtreeOperation_Enum is the enum type for RGQLQueryTreeMutation_SubtreeOperation.
export const RGQLQueryTreeMutation_SubtreeOperation_Enum = createEnumType(
  'rgraphql.RGQLQueryTreeMutation.SubtreeOperation',
  [
    { no: 0, name: 'SUBTREE_ADD_CHILD' },
    { no: 1, name: 'SUBTREE_DELETE' },
  ],
)

/**
 * @generated from enum rgraphql.RGQLValueInit.CacheStrategy
 */
export enum RGQLValueInit_CacheStrategy {
  /**
   * @generated from enum value: CACHE_LRU = 0;
   */
  CACHE_LRU = 0,
}

// RGQLValueInit_CacheStrategy_Enum is the enum type for RGQLValueInit_CacheStrategy.
export const RGQLValueInit_CacheStrategy_Enum = createEnumType(
  'rgraphql.RGQLValueInit.CacheStrategy',
  [{ no: 0, name: 'CACHE_LRU' }],
)

/**
 * @generated from message rgraphql.FieldArgument
 */
export type FieldArgument = Message<{
  /**
   * @generated from field: string name = 1;
   */
  name?: string
  /**
   * @generated from field: uint32 variable_id = 2;
   */
  variableId?: number
}>

// FieldArgument contains the message type declaration for FieldArgument.
export const FieldArgument: MessageType<FieldArgument> = createMessageType({
  typeName: 'rgraphql.FieldArgument',
  fields: [
    { no: 1, name: 'name', kind: 'scalar', T: ScalarType.STRING },
    { no: 2, name: 'variable_id', kind: 'scalar', T: ScalarType.UINT32 },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * @generated from message rgraphql.RGQLQueryFieldDirective
 */
export type RGQLQueryFieldDirective = Message<{
  /**
   * Directive name
   *
   * @generated from field: string name = 1;
   */
  name?: string
  /**
   * Optional arguments.
   *
   * @generated from field: repeated rgraphql.FieldArgument args = 2;
   */
  args?: FieldArgument[]
}>

// RGQLQueryFieldDirective contains the message type declaration for RGQLQueryFieldDirective.
export const RGQLQueryFieldDirective: MessageType<RGQLQueryFieldDirective> = createMessageType({
  typeName: 'rgraphql.RGQLQueryFieldDirective',
  fields: [
    { no: 1, name: 'name', kind: 'scalar', T: ScalarType.STRING },
    { no: 2, name: 'args', kind: 'message', T: () => FieldArgument, repeated: true },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * @generated from message rgraphql.RGQLQueryTreeNode
 */
export type RGQLQueryTreeNode = Message<{
  /**
   * Integer ID of the node.
   *
   * @generated from field: uint32 id = 1;
   */
  id?: number
  /**
   * Name of the field this node represents.
   *
   * @generated from field: string field_name = 2;
   */
  fieldName?: string
  /**
   * Arguments.
   *
   * @generated from field: repeated rgraphql.FieldArgument args = 3;
   */
  args?: FieldArgument[]
  /**
   * Directives
   *
   * @generated from field: repeated rgraphql.RGQLQueryFieldDirective directive = 4;
   */
  directive?: RGQLQueryFieldDirective[]
  /**
   * Children
   *
   * @generated from field: repeated rgraphql.RGQLQueryTreeNode children = 5;
   */
  children?: RGQLQueryTreeNode[]
}>

// RGQLQueryTreeNode contains the message type declaration for RGQLQueryTreeNode.
export const RGQLQueryTreeNode: MessageType<RGQLQueryTreeNode> = createMessageType({
  typeName: 'rgraphql.RGQLQueryTreeNode',
  fields: [
    { no: 1, name: 'id', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 2, name: 'field_name', kind: 'scalar', T: ScalarType.STRING },
    { no: 3, name: 'args', kind: 'message', T: () => FieldArgument, repeated: true },
    { no: 4, name: 'directive', kind: 'message', T: () => RGQLQueryFieldDirective, repeated: true },
    { no: 5, name: 'children', kind: 'message', T: () => RGQLQueryTreeNode, repeated: true },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * @generated from message rgraphql.RGQLPrimitive
 */
export type RGQLPrimitive = Message<{
  /**
   * @generated from field: rgraphql.RGQLPrimitive.Kind kind = 1;
   */
  kind?: RGQLPrimitive_Kind
  /**
   * @generated from field: int32 int_value = 2;
   */
  intValue?: number
  /**
   * @generated from field: double float_value = 3;
   */
  floatValue?: number
  /**
   * @generated from field: string string_value = 4;
   */
  stringValue?: string
  /**
   * @generated from field: bool bool_value = 5;
   */
  boolValue?: boolean
}>

// RGQLPrimitive contains the message type declaration for RGQLPrimitive.
export const RGQLPrimitive: MessageType<RGQLPrimitive> = createMessageType({
  typeName: 'rgraphql.RGQLPrimitive',
  fields: [
    { no: 1, name: 'kind', kind: 'enum', T: RGQLPrimitive_Kind_Enum },
    { no: 2, name: 'int_value', kind: 'scalar', T: ScalarType.INT32 },
    { no: 3, name: 'float_value', kind: 'scalar', T: ScalarType.DOUBLE },
    { no: 4, name: 'string_value', kind: 'scalar', T: ScalarType.STRING },
    { no: 5, name: 'bool_value', kind: 'scalar', T: ScalarType.BOOL },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * @generated from message rgraphql.ASTVariable
 */
export type ASTVariable = Message<{
  /**
   * @generated from field: uint32 id = 1;
   */
  id?: number
  /**
   * @generated from field: rgraphql.RGQLPrimitive value = 2;
   */
  value?: RGQLPrimitive
}>

// ASTVariable contains the message type declaration for ASTVariable.
export const ASTVariable: MessageType<ASTVariable> = createMessageType({
  typeName: 'rgraphql.ASTVariable',
  fields: [
    { no: 1, name: 'id', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 2, name: 'value', kind: 'message', T: () => RGQLPrimitive },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * @generated from message rgraphql.RGQLQueryInit
 */
export type RGQLQueryInit = Message<{
  /**
   * The ID of this query.
   *
   * @generated from field: uint32 query_id = 1;
   */
  queryId?: number
  /**
   * Force serial for this query?
   * Note: serial queries execute as soon as the first mutation arrives, and cannot be updated.
   *
   * @generated from field: bool force_serial = 2;
   */
  forceSerial?: boolean
  /**
   * Operation type, i.e. query, mutation, etc.
   *
   * @generated from field: string operation_type = 3;
   */
  operationType?: string
}>

// RGQLQueryInit contains the message type declaration for RGQLQueryInit.
export const RGQLQueryInit: MessageType<RGQLQueryInit> = createMessageType({
  typeName: 'rgraphql.RGQLQueryInit',
  fields: [
    { no: 1, name: 'query_id', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 2, name: 'force_serial', kind: 'scalar', T: ScalarType.BOOL },
    { no: 3, name: 'operation_type', kind: 'scalar', T: ScalarType.STRING },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * @generated from message rgraphql.RGQLQueryTreeMutation.NodeMutation
 */
export type RGQLQueryTreeMutation_NodeMutation = Message<{
  /**
   * ID of the node we are operating on.
   *
   * @generated from field: uint32 node_id = 1;
   */
  nodeId?: number
  /**
   * Operation we are taking.
   *
   * @generated from field: rgraphql.RGQLQueryTreeMutation.SubtreeOperation operation = 2;
   */
  operation?: RGQLQueryTreeMutation_SubtreeOperation
  /**
   * The new node tree to add, if we are adding a child.
   *
   * @generated from field: rgraphql.RGQLQueryTreeNode node = 3;
   */
  node?: RGQLQueryTreeNode
}>

// RGQLQueryTreeMutation_NodeMutation contains the message type declaration for RGQLQueryTreeMutation_NodeMutation.
export const RGQLQueryTreeMutation_NodeMutation: MessageType<RGQLQueryTreeMutation_NodeMutation> =
  createMessageType({
    typeName: 'rgraphql.RGQLQueryTreeMutation.NodeMutation',
    fields: [
      { no: 1, name: 'node_id', kind: 'scalar', T: ScalarType.UINT32 },
      { no: 2, name: 'operation', kind: 'enum', T: RGQLQueryTreeMutation_SubtreeOperation_Enum },
      { no: 3, name: 'node', kind: 'message', T: () => RGQLQueryTreeNode },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * @generated from message rgraphql.RGQLQueryTreeMutation
 */
export type RGQLQueryTreeMutation = Message<{
  /**
   * The ID of this query.
   *
   * @generated from field: uint32 query_id = 1;
   */
  queryId?: number
  /**
   * All node mutations in this step.
   *
   * @generated from field: repeated rgraphql.RGQLQueryTreeMutation.NodeMutation node_mutation = 2;
   */
  nodeMutation?: RGQLQueryTreeMutation_NodeMutation[]
  /**
   * Any new variables.
   *
   * @generated from field: repeated rgraphql.ASTVariable variables = 3;
   */
  variables?: ASTVariable[]
}>

// RGQLQueryTreeMutation contains the message type declaration for RGQLQueryTreeMutation.
export const RGQLQueryTreeMutation: MessageType<RGQLQueryTreeMutation> = createMessageType({
  typeName: 'rgraphql.RGQLQueryTreeMutation',
  fields: [
    { no: 1, name: 'query_id', kind: 'scalar', T: ScalarType.UINT32 },
    {
      no: 2,
      name: 'node_mutation',
      kind: 'message',
      T: () => RGQLQueryTreeMutation_NodeMutation,
      repeated: true,
    },
    { no: 3, name: 'variables', kind: 'message', T: () => ASTVariable, repeated: true },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * @generated from message rgraphql.RGQLQueryFinish
 */
export type RGQLQueryFinish = Message<{
  /**
   * The ID of this query.
   *
   * @generated from field: uint32 query_id = 1;
   */
  queryId?: number
}>

// RGQLQueryFinish contains the message type declaration for RGQLQueryFinish.
export const RGQLQueryFinish: MessageType<RGQLQueryFinish> = createMessageType({
  typeName: 'rgraphql.RGQLQueryFinish',
  fields: [
    { no: 1, name: 'query_id', kind: 'scalar', T: ScalarType.UINT32 },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * Messages
 *
 * @generated from message rgraphql.RGQLClientMessage
 */
export type RGQLClientMessage = Message<{
  /**
   * @generated from field: rgraphql.RGQLQueryInit init_query = 1;
   */
  initQuery?: RGQLQueryInit
  /**
   * @generated from field: rgraphql.RGQLQueryTreeMutation mutate_tree = 2;
   */
  mutateTree?: RGQLQueryTreeMutation
  /**
   * @generated from field: rgraphql.RGQLQueryFinish finish_query = 3;
   */
  finishQuery?: RGQLQueryFinish
}>

// RGQLClientMessage contains the message type declaration for RGQLClientMessage.
export const RGQLClientMessage: MessageType<RGQLClientMessage> = createMessageType({
  typeName: 'rgraphql.RGQLClientMessage',
  fields: [
    { no: 1, name: 'init_query', kind: 'message', T: () => RGQLQueryInit },
    { no: 2, name: 'mutate_tree', kind: 'message', T: () => RGQLQueryTreeMutation },
    { no: 3, name: 'finish_query', kind: 'message', T: () => RGQLQueryFinish },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * Communicating a failure in the input query.
 *
 * @generated from message rgraphql.RGQLQueryError
 */
export type RGQLQueryError = Message<{
  /**
   * @generated from field: uint32 query_id = 1;
   */
  queryId?: number
  /**
   * @generated from field: uint32 query_node_id = 2;
   */
  queryNodeId?: number
  /**
   * @generated from field: string error = 3;
   */
  error?: string
}>

// RGQLQueryError contains the message type declaration for RGQLQueryError.
export const RGQLQueryError: MessageType<RGQLQueryError> = createMessageType({
  typeName: 'rgraphql.RGQLQueryError',
  fields: [
    { no: 1, name: 'query_id', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 2, name: 'query_node_id', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 3, name: 'error', kind: 'scalar', T: ScalarType.STRING },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * RGQLValueInit initializes a result value tree.
 *
 * @generated from message rgraphql.RGQLValueInit
 */
export type RGQLValueInit = Message<{
  /**
   * result_id is the identifier for the result tree.
   *
   * @generated from field: uint32 result_id = 1;
   */
  resultId?: number
  /**
   * query_id is the identifier for the corresponding query.
   *
   * @generated from field: uint32 query_id = 2;
   */
  queryId?: number
  /**
   * cache_strategy is the strategy used for the path cache.
   *
   * @generated from field: rgraphql.RGQLValueInit.CacheStrategy cache_strategy = 3;
   */
  cacheStrategy?: RGQLValueInit_CacheStrategy
  /**
   * cache_size is the size of the path cache, if necessary.
   *
   * @generated from field: uint32 cache_size = 4;
   */
  cacheSize?: number
}>

// RGQLValueInit contains the message type declaration for RGQLValueInit.
export const RGQLValueInit: MessageType<RGQLValueInit> = createMessageType({
  typeName: 'rgraphql.RGQLValueInit',
  fields: [
    { no: 1, name: 'result_id', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 2, name: 'query_id', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 3, name: 'cache_strategy', kind: 'enum', T: RGQLValueInit_CacheStrategy_Enum },
    { no: 4, name: 'cache_size', kind: 'scalar', T: ScalarType.UINT32 },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * @generated from message rgraphql.RGQLValueBatch
 */
export type RGQLValueBatch = Message<{
  /**
   * The ID of the result tree this batch is for.
   *
   * @generated from field: uint32 result_id = 1;
   */
  resultId?: number
  /**
   * The batch of RGQLValue values, encoded.
   *
   * @generated from field: repeated bytes values = 2;
   */
  values?: Uint8Array[]
}>

// RGQLValueBatch contains the message type declaration for RGQLValueBatch.
export const RGQLValueBatch: MessageType<RGQLValueBatch> = createMessageType({
  typeName: 'rgraphql.RGQLValueBatch',
  fields: [
    { no: 1, name: 'result_id', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 2, name: 'values', kind: 'scalar', T: ScalarType.BYTES, repeated: true },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * RGQLValueFinalize finalizes a result tree.
 *
 * @generated from message rgraphql.RGQLValueFinalize
 */
export type RGQLValueFinalize = Message<{
  /**
   * @generated from field: uint32 result_id = 1;
   */
  resultId?: number
}>

// RGQLValueFinalize contains the message type declaration for RGQLValueFinalize.
export const RGQLValueFinalize: MessageType<RGQLValueFinalize> = createMessageType({
  typeName: 'rgraphql.RGQLValueFinalize',
  fields: [
    { no: 1, name: 'result_id', kind: 'scalar', T: ScalarType.UINT32 },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * @generated from message rgraphql.RGQLServerMessage
 */
export type RGQLServerMessage = Message<{
  /**
   * @generated from field: rgraphql.RGQLQueryError query_error = 2;
   */
  queryError?: RGQLQueryError
  /**
   * @generated from field: rgraphql.RGQLValueInit value_init = 4;
   */
  valueInit?: RGQLValueInit
  /**
   * @generated from field: rgraphql.RGQLValueBatch value_batch = 5;
   */
  valueBatch?: RGQLValueBatch
  /**
   * @generated from field: rgraphql.RGQLValueFinalize value_finalize = 6;
   */
  valueFinalize?: RGQLValueFinalize
}>

// RGQLServerMessage contains the message type declaration for RGQLServerMessage.
export const RGQLServerMessage: MessageType<RGQLServerMessage> = createMessageType({
  typeName: 'rgraphql.RGQLServerMessage',
  fields: [
    { no: 2, name: 'query_error', kind: 'message', T: () => RGQLQueryError },
    { no: 4, name: 'value_init', kind: 'message', T: () => RGQLValueInit },
    { no: 5, name: 'value_batch', kind: 'message', T: () => RGQLValueBatch },
    { no: 6, name: 'value_finalize', kind: 'message', T: () => RGQLValueFinalize },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * @generated from message rgraphql.RGQLValue
 */
export type RGQLValue = Message<{
  /**
   * The ID of the field in the query tree, if a field.
   *
   * @generated from field: uint32 query_node_id = 1;
   */
  queryNodeId?: number
  /**
   * The 1-based index, if an array element.
   *
   * @generated from field: uint32 array_index = 2;
   */
  arrayIndex?: number
  /**
   * If this is a 0-th index value, this is a pointer to a previous identifier.
   * Otherwise, this is an identifier for adding an alias to this path.
   *
   * @generated from field: uint32 pos_identifier = 3;
   */
  posIdentifier?: number
  /**
   * The value, if we have one.
   *
   * @generated from field: rgraphql.RGQLPrimitive value = 4;
   */
  value?: RGQLPrimitive
  /**
   * The error, if we are erroring this field.
   *
   * @generated from field: string error = 5;
   */
  error?: string
}>

// RGQLValue contains the message type declaration for RGQLValue.
export const RGQLValue: MessageType<RGQLValue> = createMessageType({
  typeName: 'rgraphql.RGQLValue',
  fields: [
    { no: 1, name: 'query_node_id', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 2, name: 'array_index', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 3, name: 'pos_identifier', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 4, name: 'value', kind: 'message', T: () => RGQLPrimitive },
    { no: 5, name: 'error', kind: 'scalar', T: ScalarType.STRING },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})
